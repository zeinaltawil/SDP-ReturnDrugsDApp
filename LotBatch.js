import React, { Component } from 'react';
import logo from './logo.svg';
import logo2 from './logo2.svg';
import './App.css';
import web3 from './web3';
import { Button } from 'reactstrap';
import IPFS from './ipfs';
import QrCode from 'react.qrcode.generator'
import QrReader from "react-qr-reader";
import LBabi from "./LBabi.json";
class LotBatch extends Component {
  constructor(props) {
    super(props);
    this.state = {
    buffer:'',
    ipfsHash:null,
    myContract: null,
    account: '',
    contractadd:'',
    qrAdd:'',
    g: false,
    r: false,
    qr: false,
    delay: 300,
    result: ''
    };
    this.handleScan = this.handleScan.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }

   componentDidMount = async (event) => {
  const accounts = await web3.eth.getAccounts();
   this.setState({account:accounts[0]});
};


 handleScan(data) {
    if (data) {
      this.setState({
        result: data
      });
    }
  };
    handleChange(event) {
    this.setState({result: event.target.value});
  }
  handleError(err) {
    console.error(err);
  };
  onScan = async(event) => {
    event.preventDefault();
     this.setState({qr:true});
 };
  captureFile =(event) => {
    event.stopPropagation()
    event.preventDefault()
    const file = event.target.files[0]
    let reader = new window.FileReader()
    reader.readAsArrayBuffer(file)
    reader.onloadend = () => this.convertToBuffer(reader)    
  };//Capture File

convertToBuffer = async(reader) => {
  //file is converted to a buffer for upload to IPFS
    const buffer = await Buffer.from(reader.result);
  //set this buffer -using es6 syntax
    this.setState({buffer});
};// converToBuffer


  onSubmit = async (event) => {
    event.preventDefault();
    //bring in user's metamask account address
    console.log('trying to connect to metamask');
    const accounts = await web3.eth.getAccounts();
    var ipfshash= '';
   for await (const result of IPFS.add(this.state.buffer)) {
      console.log(result)
      console.log(JSON.stringify(result));
      if (result.hasOwnProperty("path")){
        console.log(result.path);  
        ipfshash= result.path;
        this.setState({ipfsHash:result.path});
    }
  }
    console.log('Sending from Metamask account: ' + accounts[0]);
    this.setState({account:accounts[0]});
    var abi = LBabi;
  var bin= '0x60806040523480156100115760006000fd5b50604051610a2d380380610a2d833981810160405260a08110156100355760006000fd5b81019080805160405193929190846401000000008211156100565760006000fd5b8382019150602082018581111561006d5760006000fd5b825186600182028301116401000000008211171561008b5760006000fd5b8083526020830192505050908051906020019080838360005b838110156100c05780820151818401525b6020810190506100a4565b50505050905090810190601f1680156100ed5780820380516001836020036101000a031916815260200191505b50604052602001805190602001909291908051906020019092919080519060200190929190805190602001909291905050505b8460006000509080519060200190610139929190610313565b5083600160005081909090555082600260005081909090555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160046000508190909055508060056000508190909055506040518060400160405280600c81526020017f4d616e7566616374757265720000000000000000000000000000000000000000815260200150600660005090805190602001906101fc929190610313565b507f8c39ce43a182fa2dc82f0913a32725bfc5f1b3a5dd91d49ef8e086d3c4b99d1730868484600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808673ffffffffffffffffffffffffffffffffffffffff168152602001806020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825286818151815260200191508051906020019080838360005b838110156102ca5780820151818401525b6020810190506102ae565b50505050905090810190601f1680156102f75780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a15b50505050506103bb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061035457805160ff1916838001178555610387565b82800160010185558215610387579182015b828111156103865782518260005090905591602001919060010190610366565b5b5090506103949190610398565b5090565b61039d565b808211156103b7576000818150600090555060010161039d565b5090565b610663806103ca6000396000f3fe60806040523480156100115760006000fd5b506004361061003b5760003560e01c80635917f1e414610041578063faec4db4146100705761003b565b60006000fd5b61006e600480360360208110156100585760006000fd5b8101908080359060200190929190505050610133565b005b610131600480360360208110156100875760006000fd5b81019080803590602001906401000000008111156100a55760006000fd5b8201836020820111156100b85760006000fd5b803590602001918460018302840111640100000000831117156100db5760006000fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050909091929090919290505050610380565b005b6007600050600082815260200190815260200160002060009054906101000a900460ff161515156101cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4472756720426f7820507572636861736564000000000000000000000000000081526020015060200191505060405180910390fd5b4260026000505411151561024e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f447275672068617320657870697265640000000000000000000000000000000081526020015060200191505060405180910390fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600781526020017f50617469656e7400000000000000000000000000000000000000000000000000815260200150600660005090805190602001906102e0929190610585565b50600460008181505480929190600190039190509090555060016007600050600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507faa0617e9fc149abcfe1a375a6813699812de4d56a43c7a09d9d5a831dd28e81f3082604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610448576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53656e646572206e6f7420617574686f72697a65642e0000000000000000000081526020015060200191505060405180910390fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660005090805190602001906104a2929190610585565b507fabda1e214f112a7ea7b513d5098fa6fd85acae1fcc6ed872c90bcef6c68c9d2c600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105455780820151818401525b602081019050610529565b50505050905090810190601f1680156105725780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105c657805160ff19168380011785556105f9565b828001600101855582156105f9579182015b828111156105f857825182600050909055916020019190600101906105d8565b5b509050610606919061060a565b5090565b61060f565b80821115610629576000818150600090555060010161060f565b509056fea26469706673582212200adb93053bac11bfa5b796118e4242313af113c1f0e9b0d7d6f27072175a66ce64736f6c634300060c0033';
  //var encodedbytecode = '0x608060405234801561001057600080fd5b50604051610a21380380610a21833981810160405260a081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186600182028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019080838360005b838110156100ba57808201518184015260208101905061009f565b50505050905090810190601f1680156100e75780820380516001836020036101000a031916815260200191505b5060405260200180519060200190929190805190602001909291908051906020019092919080519060200190929190505050846000908051906020019061012f929190610319565b50836001819055508260028190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600481905550806005819055506040518060400160405280600c81526020017f4d616e7566616374757265720000000000000000000000000000000000000000815250600690805190602001906101d8929190610319565b507f8c39ce43a182fa2dc82f0913a32725bfc5f1b3a5dd91d49ef8e086d3c4b99d1730868484600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825286818151815260200191508051906020019080838360005b838110156102d15780820151818401526020810190506102b6565b50505050905090810190601f1680156102fe5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a150505050506103be565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061035a57805160ff1916838001178555610388565b82800160010185558215610388579182015b8281111561038757825182559160200191906001019061036c565b5b5090506103959190610399565b5090565b6103bb91905b808211156103b757600081600090555060010161039f565b5090565b90565b610654806103cd6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635917f1e41461003b578063faec4db414610069575b600080fd5b6100676004803603602081101561005157600080fd5b8101908080359060200190929190505050610124565b005b6101226004803603602081101561007f57600080fd5b810190808035906020019064010000000081111561009c57600080fd5b8201836020820111156100ae57600080fd5b803590602001918460018302840111640100000000831117156100d057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610369565b005b6007600082815260200190815260200160002060009054906101000a900460ff16156101b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4472756720426f7820507572636861736564000000000000000000000000000081525060200191505060405180910390fd5b426002541161022f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f447275672068617320657870697265640000000000000000000000000000000081525060200191505060405180910390fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600781526020017f50617469656e7400000000000000000000000000000000000000000000000000815250600690805190602001906102bb929190610579565b506004600081548092919060019003919050555060016007600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507faa0617e9fc149abcfe1a375a6813699812de4d56a43c7a09d9d5a831dd28e81f3082604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53656e646572206e6f7420617574686f72697a65642e0000000000000000000081525060200191505060405180910390fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060069080519060200190610483929190610579565b507fabda1e214f112a7ea7b513d5098fa6fd85acae1fcc6ed872c90bcef6c68c9d2c600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561053b578082015181840152602081019050610520565b50505050905090810190601f1680156105685780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105ba57805160ff19168380011785556105e8565b828001600101855582156105e8579182015b828111156105e75782518255916020019190600101906105cc565b5b5090506105f591906105f9565b5090565b61061b91905b808211156106175760008160009055506001016105ff565b5090565b9056fea2646970667358221220eb9585bd7ad2dd8375d4e259113e85315a728801abfa461fa8a255d79cc2c97c64736f6c6343000606003300000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000005f1f455d0000000000000000000000000000000000000000000000000000000062e1ac5d00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000770616e61646f6c00000000000000000000000000000000000000000000000000'
    var myContract= new web3.eth.Contract(abi);
    var Lotbatchnew;
    var a = document.getElementById("medicine").value;
    var b = document.getElementById("mdate").value;
    var c = document.getElementById("edate").value;
    var d = document.getElementById("quant").value;
    var e = document.getElementById("price").value;
    //myContract.options.data= bin;
    await myContract.deploy({data: bin,arguments:[a,b,c,d,e]}).send({
      from: accounts[0]

  })
  .then(function(newContractInstance){
      Lotbatchnew= newContractInstance;
      document.getElementById("demo").innerHTML = "Your contract got deployed successfully at address: "+newContractInstance.options.address;
      console.log(newContractInstance.options.address) // instance with the new contract address
  });
  document.getElementById("image2").src ="https://gateway.ipfs.io/ipfs/"+this.state.ipfsHash;


  //here
  this.setState({myContract:Lotbatchnew});
  this.setState({qrAdd:this.state.myContract.options.address});
  this.setState({g:true});
  console.log(this.state.qrAdd);
  console.log(this.state.g);
    }; //onSubmit
  onSell = async (event) =>{
    event.preventDefault();
    var sellQ= document.getElementById("sellQ").value;
    var sellAdd = document.getElementById("sellAdd").value;
    var contractnew= new web3.eth.Contract(LBabi,sellAdd);
    var account= this.state.account;
    await contractnew.methods.sellDrug(sellQ).send({from:account},function(error, transactionHash){
        
        console.log(transactionHash);

        const revertmsg = async() => {
        const getRevertReason = require('eth-revert-reason');
        var y = await getRevertReason(transactionHash,'ropsten');
        console.log(y);
        if(y!== '')
        document.getElementById("rvm1").innerHTML = y;
        else
          document.getElementById("rvm1").innerHTML = "Drug Sold Successfully";
       };
       
       revertmsg(transactionHash);
    }
  )};
  render() {return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" id="image1"/>
        <img src={logo2} className="App-logo2" alt="logo2" id="image3" />
        <p>
          Edit <code>src/LotBatch.js</code> and save to reload.
        </p>
        <a
          
        >
           Your Ethereum Address is {this.state.account}
        </a>
      </header>

      <div class="center">
          <form onSubmit={this.onClick}>
          <input 
              type = "file"
              onChange = {this.captureFile}
            />
             <form onSubmit={this.onSubmit}>

             Medicine Name: <input type="text" id="medicine"/>
             <br/>
              Manu date: <input type="text" id="mdate" />
             <br/>
              Expiry date: <input type="text" id="edate" />
             <br />
             Quantity: <input type="text" id="quant" />
             <br />
             Price: <input type="text" id="price" />
             <br />
             <Button  bsstyle="primary" type="submit">  Deploy Lot Batch </Button>
             <p id="demo"></p> 
          </form>
          </form>

          <form onSubmit={this.onSell}>
            Medicine Quantity: <input type = "text" id="sellQ"/>
            Medicine EA:<input type = "text" id="sellAdd" value={this.state.result} onChange={this.handleChange} />
             <Button  type="submit">  Sell Drug </Button>
          </form>
          <p id="rvm1"></p> 
          
          <form onSubmit={this.onScan}>
          <Button  bsstyle="primary" type="submit"> Read QR Code </Button>
          </form>
           <h1>{ this.state.g == true ? <QrCode value={this.state.qrAdd} QrCode size = {'400'}/> : '' } </h1> 
          <h1> { this.state.qr== true && this.state.result == '' ? <QrReader
          delay={this.state.delay}
          onError={this.handleError}
          onScan={this.handleScan}
          style={{ width: "25%" }}
        />  : ''} </h1>
        <p>{this.state.result}</p>
        <img  height="500" width="500" id="image2" />
    </div>
    </div>
  );// return
  }// render()
}// App


export default LotBatch;
